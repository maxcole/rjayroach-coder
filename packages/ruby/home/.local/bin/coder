#!/usr/bin/env ruby

require 'erb'
require 'git'
require 'pathname'
require 'thor'

# Create a new Project following my naming conventions
class Project < Thor
  def self.exit_on_failure? = true

  desc 'ls', 'List projects'
  method_option :depth, aliases: '-L', required: false, type: :numeric
  def ls
    depth = options[:depth] || 1
    system("tree -L #{depth} #{projects_dir}")
  end

  desc 'new [NAME] [TYPE]', 'Create a new project of type [TYPE]'
  method_option :force, aliases: '-f', type: :boolean, default: false,
                        desc: 'Force create project by removing existing directory'
  method_option :git, aliases: '-g', type: :boolean, default: false,
                        desc: 'Create a remote Github repo'
  method_option :tmux, aliases: '-t', type: :boolean, default: false,
                        desc: 'Create a tmuxinator file'
  # rubocop:disable Metrics/AbcSize, Metrics/MethodLength
  def new(project_name, type)
    @project_name = project_name
    @project_type = type # options[:type]

    unless name.size > 1
      puts "Project name must have at least two parts separated by hyphens. Example: #{@project_name}-test"
      return
    end

    if name.size > 2
      # then check that the parent dir already exists and it has a .git dir in it
    end

    unless project_types.include?(@project_type)
      puts "Project type must be one of #{project_types.join(', ')}"
      return
    end

    if path.exist?
      if options[:force]
        puts "Removing existing project at #{path}"
        path.rmtree
      else
        puts "Project already exists at #{path}"
        puts 'Use --force to overwrite the existing project'
        return
      end
    end

    usr = "About to create a new project\n\n"
    usr.concat("in dir: #{path.parent}\n")
    usr.concat("name: #{final_name}\n")
    usr.concat("type: #{@project_type}\n")
    if options[:git]
      usr.concat("github remote: #{github_remote}\n")
    else
      usr.concat("github remote: NONE\n")
    end
    if options[:tmux]
      usr.concat("tmuxinator file: #{tmuxinator_output_file}\n")
    else
      usr.concat("tmuxinator file: NONE\n")
    end
    usr.concat("\nAre you sure? (y/n): ")
    puts usr
    answer = $stdin.gets.chomp.downcase
    unless %w[y yes].include?(answer)
      puts 'Aborting...'
      return
    end

    path.parent.mkpath
    puts "Creating new #{@project_type} project: #{final_name}"

    case @project_type
    when 'claude'
      create_claude
    when 'rails'
      create_rails
    when 'solana'
      create_solana
    end

    git_init if options[:git]
  end
  # rubocop:enable Metrics/AbcSize, Metrics/MethodLength

  no_commands do
    def project_types = %w[claude rails solana]

    def create_claude
    end

    def create_rails
      puts "Running #{rails_cmd}"
      Dir.chdir(path.parent) { system(rails_cmd) }
      generate_tmuxinator if options[:tmux]
    end

    def create_solana
      Dir.chdir(path.parent) { system(rails_cmd) }
      # Add Solana project creation logic here
    end

    # Create tmuxinator file
    def generate_tmuxinator
      template_file = templates_dir.join('tmuxinator.yml.erb')

      erb = ERB.new(template_file.read)
      result = erb.result(binding)

      File.write(tmuxinator_output_file, result)
      puts "Generated tmuxinator config: #{tmuxinator_output_file}"
    end

    def tmuxinator_output_file = tmuxinator_dir.join("#{@project_name}.yml")

    def git_init
      # system(github_cmd)
      # g = Git.init()
      # g.add(all: true)
      # g.commit('first commit')
      # # git branch -M main
      # # git remote add origin git@github.com:maxcole/pcs-test-rust.git
      # # git push -u origin main
      # g.push('origin', 'main')
      binding.pry
    end

    def github_cmd = "gh repo create #{github_remote} --private --source=. --remote=upstream"

    def github_remote = "#{projects_github_org}/#{@project_name}"

    def projects_github_org = ENV.fetch('PROJECTS_GITHUB_ORG', '')

    def final_name = name.last

    def rails_cmd
      cmd = 'rails new '
      cmd.concat("--rc=#{rails_rc_path} ") if rails_rc_path.exist?
      cmd.concat(final_name)
    end

    def rails_rc_path = Pathname.new(Dir.home).join('.config/rails/rc')

    def path = projects_dir.join(name.join('/'))

    def name = @project_name.split('-')

    def parent_project = name[0..1].join('-')

    def repo = "#{git_remote_prefix}/#{@project_name}"

    def projects_dir = Pathname.new(ENV.fetch('PROJECTS_DIR', Dir.home))

    def git_remote_prefix = ENV.fetch('PROJECTS_GIT_REMOTE_PREFIX', '')

    def templates_dir = dotfiles_home.join('packages/ruby/templates', @project_type)

    def tmuxinator_dir = dotfiles_home.join('packages/tmuxinator/home/.config/tmuxinator')

    def dotfiles_home = Pathname.new(ENV.fetch('DOTFILES_HOME', Dir.home))
  end
end

Project.start(ARGV)
