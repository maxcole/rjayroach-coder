#!/usr/bin/env ruby
require 'pathname'
require 'pry'
require 'thor'

class Project < Thor
  desc "new PROJECT_NAME", "Create a new project"
  method_option :type, aliases: "-t", required: true, enum: ["rails", "solana"], desc: "Type of project to create"
  def new(project_name)
    @project_name = project_name
    project_type = options[:type]

    unless valid?
      puts "Project name must have at least two parts separated by hyphens. Example: #{@project_name}-test"
      return
    end

    if path.exist?
      puts "Project already exists at #{path}"
      return
    end

    puts "About to create a new #{project_type} project '#{final_name}' in #{path.parent}\nAre you sure? (y/n): "
    answer = STDIN.gets.chomp.downcase
    unless answer == 'y' || answer == 'yes'
      puts "Aborting..."
      return
    end

    path.parent.mkpath

    case project_type
    when "rails"
      puts "Creating new Rails project: #{final_name}"
      puts "Running #{rails_cmd}"
      Dir.chdir(path.parent) { system(rails_cmd) }
      if has_parent_project
        # this project has a parent project 
        # so add the code to tmuxinator to handle this
      end
    when "solana"
      puts "Creating new Solana project: #{final_name}"
      Dir.chdir(path.parent) { system(rails_cmd) }
      # Add Solana project creation logic here
    end
  end

  no_commands do
    def final_name() = name.last
    def rails_cmd
      cmd = "rails new "
      cmd = cmd.concat("--rc=#{rails_rc_path} ") if rails_rc_path.exist?
      cmd.concat(final_name)
    end

    def rails_rc_path() = Pathname.new(Dir.home).join('.config/rails/rc')

    def path() = Pathname.new(projects_dir).join(name.join('/'))

    def name() = @project_name.split('-')

    def parent_project() = name[0..1].join('-')

    def valid?() = name.size > 1

    def repo() = "#{git_remote_prefix}/#{@project_name}"

    def projects_dir() = ENV.fetch('PROJECTS_DIR', Dir.home)

    def git_remote_prefix() = ENV.fetch('PROJECTS_GIT_REMOTE_PREFIX', '')

    def has_parent_project() = name.size > 2
  end

end

Project.start(ARGV)
